// https://leetcode.com/problems/number-of-islands/

//@ts-ignore
type Point = [number, number];

const bfs = (grid: string[][], r: number, c: number, id: number) => {
    let queue: Point[] = [];
    let current: Point = [r, c];
    queue.push(current);

    while(queue.length) {
        let [dr, dc] = queue.shift()!;
        grid[dr][dc] = id.toString();
        
        if(dc - 1 >= 0 && grid[dr][dc - 1] === '1') { // West
            grid[dr][dc - 1] = id.toString();
            queue.push([dr, dc - 1]);
        }
        if(dr - 1 >= 0 && grid[dr - 1][dc] === '1') { // North
            grid[dr - 1][dc] = id.toString();
            queue.push([dr - 1, dc]);
        }
        if(dc + 1 < grid[0].length && grid[dr][dc + 1] === '1') { // East
            grid[dr][dc + 1] = id.toString();
            queue.push([dr, dc + 1]);
        }
        if(dr + 1 < grid.length && grid[dr + 1][dc] === '1') { // South
            grid[dr + 1][dc] = id.toString();
            queue.push([dr + 1, dc]);
        }
    }
}

function numIslands(grid: string[][]): number {
    
    let id = 1;
    for(let r = 0; r < grid.length; ++r) {
        for(let c = 0; c < grid[0].length; ++c) {
            if(grid[r][c] === '1') { // found an unchecked island
                ++id;
                bfs(grid, r, c, id);
            }
        }
    }

    return id - 1;
};

const grid = [
    ['1','1','0','0','0'],
    ['1','1','0','0','0'],
    ['0','0','1','0','0'],
    ['0','0','0','1','1']
];

console.log(numIslands(grid)); // 3

const grid2 = [
    ['1','0','1'],
    ['0','1','0'],
    ['1','0','1']
];

console.log(numIslands(grid2)); // 5

const grid3 = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]];

console.log(numIslands(grid3)); // 1

// id = 2
// 0 2 2
// 0 2 2
// 1 0 2

// id = 1;
// loop through array until grid[r][c] === 1
//      ++id;
//      BFS on grid[r][c], replace visited cells with id
// return id - 1;

// 1 0 1
// 0 1 1
// 1 0 0

// id = 2, grid[0][0]
// 2 0 1
// 0 1 1
// 1 0 0

// id = 3, grid[0][2]
// 2 0 3
// 0 3 3
// 1 0 0

// id = 4, grid[2][0]
// 2 0 3
// 0 3 3
// 4 0 0

// return id - 1 // 3

